<Application x:Class="MySchool.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:MySchool"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Main font (global) -->
        <!-- Reference the embedded font file explicitly and use its internal family name -->
        <FontFamily x:Key="Font.Main">pack://application:,,,/MySchool;component/resources/fonts/Inter/Inter.ttc#Inter</FontFamily>
        
        <!-- Brand font for greetings and app title -->
        <FontFamily x:Key="Font.Brand">pack://application:,,,/MySchool;component/resources/fonts/SF-Pro.ttf#SF Pro</FontFamily>

        <!-- Theme preview colors for Discord-style theme switcher -->
        <SolidColorBrush x:Key="Theme.Light.Preview" Color="#EEF2F7"/>
        <SolidColorBrush x:Key="Theme.Dark.Preview" Color="#0B1220"/>
        <SolidColorBrush x:Key="Theme.Midnight.Preview" Color="#1A1A2E"/>
        <SolidColorBrush x:Key="Theme.Nord.Preview" Color="#2E3440"/>
        <SolidColorBrush x:Key="Theme.Ocean.Preview" Color="#F0F9FF"/>
        <SolidColorBrush x:Key="Theme.Forest.Preview" Color="#F0FDF4"/>

        <!-- Default TextBlock font and color so pages without explicit styles still use the app font and themed text color -->
        <Style TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource Font.Main}"/>
            <!-- Use DynamicResource because Brush.TextPrimary is defined later in this dictionary -->
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <!-- ClearType and text rendering enhancements for better font clarity -->
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="Auto"/>
            <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
        </Style>

        <!-- Color palette -->
        <SolidColorBrush x:Key="Brush.Primary" Color="#4F46E5"/>
        <SolidColorBrush x:Key="Brush.PrimaryDark" Color="#4338CA"/>
        <SolidColorBrush x:Key="Brush.Accent" Color="#06B6D4"/>
        <SolidColorBrush x:Key="Brush.Surface" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="Brush.Background" Color="#F5F7FB"/>
        <SolidColorBrush x:Key="Brush.TextPrimary" Color="#0F172A"/>
        <SolidColorBrush x:Key="Brush.TextSecondary" Color="#475569"/>
        <SolidColorBrush x:Key="Brush.Border" Color="#D1D5DB"/>

        <!-- Typography helpers -->
        <Style x:Key="Text.Headline" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource Font.Main}"/>
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="Auto"/>
            <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
        </Style>
        <Style x:Key="Text.Title" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource Font.Main}"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="Auto"/>
            <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
        </Style>
        <Style x:Key="Text.Body" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="{StaticResource Font.Main}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextSecondary}"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="Auto"/>
            <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
        </Style>

        <!-- Cards -->
        <Style x:Key="Card" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource Brush.Surface}"/>
            <Setter Property="CornerRadius" Value="12"/>
            <Setter Property="Padding" Value="16"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect BlurRadius="12" ShadowDepth="0" Opacity="0.14"/>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Buttons -->
        <Style x:Key="Button.Primary" TargetType="Button">
            <Setter Property="Background" Value="{DynamicResource Brush.Primary}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Padding" Value="16,10"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="ButtonBorder" 
                                Background="{TemplateBinding Background}"
                                CornerRadius="8"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              TextElement.Foreground="{TemplateBinding Foreground}"
                                              TextElement.FontWeight="{TemplateBinding FontWeight}"
                                              TextElement.FontSize="{TemplateBinding FontSize}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource Brush.PrimaryDark}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource Brush.PrimaryDark}"/>
                                <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.9"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Button.Secondary" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.Primary}"/>
            <Setter Property="Padding" Value="16,10"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="ButtonBorder" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource Brush.Primary}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="8"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              TextElement.FontWeight="{TemplateBinding FontWeight}"
                                              TextElement.FontSize="{TemplateBinding FontSize}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ButtonBorder" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{Binding Source={StaticResource Brush.Primary}, Path=Color}" Opacity="0.1"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource Brush.PrimaryDark}"/>
                                <Setter Property="Foreground" Value="{DynamicResource Brush.PrimaryDark}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ButtonBorder" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{Binding Source={StaticResource Brush.Primary}, Path=Color}" Opacity="0.2"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TextBox Styles -->
        <Style x:Key="TextBox.Standard" TargetType="TextBox">
            <Setter Property="Background" Value="{DynamicResource Brush.Surface}"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Primary}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Padding" Value="12,8"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontFamily" Value="{StaticResource Font.Main}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="8"
                                SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" 
                                          Focusable="false"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          Margin="2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Brush.PrimaryDark}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Brush.PrimaryDark}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="border" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Icon text using Segoe MDL2 Assets -->
        <Style x:Key="Icon" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.Primary}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <!-- Caption buttons (WinUI-like) -->
        <Style x:Key="CaptionButton" TargetType="Button">
            <Setter Property="Width" Value="46"/>
            <Setter Property="Height" Value="36"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="root" Background="{TemplateBinding Background}" CornerRadius="6">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="root" Property="Background" Value="#1A000000"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="root" Property="Background" Value="#33000000"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CaptionButton.Close" TargetType="Button" BasedOn="{StaticResource CaptionButton}">
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="root" Background="{TemplateBinding Background}" CornerRadius="6">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="root" Property="Background" Value="#FFE81123"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="root" Property="Background" Value="#FFB10F1E"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Modern rounded scrollbar -->
        <!-- Button inside Track (hidden, we only want paging behavior) -->
        <Style x:Key="ScrollBarPageButton" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="Transparent"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Theme Switcher RadioButton Style (Discord-like) -->
        <Style x:Key="ThemeSwitcherRadioButton" TargetType="RadioButton">
    <Setter Property="Width" Value="72"/>
        <Setter Property="Height" Value="72"/>
            <Setter Property="Margin" Value="0,0,8,0"/>
            <Setter Property="Cursor" Value="Hand"/>
<Setter Property="Template">
        <Setter.Value>
         <ControlTemplate TargetType="RadioButton">
    <Grid>
 <Border x:Name="OuterBorder"
   Background="{TemplateBinding Tag}"
      CornerRadius="16"
         BorderThickness="3"
        BorderBrush="Transparent">
      <Grid>
      <!-- Inner border for visibility -->
          <Border x:Name="InnerBorder"
   CornerRadius="13"
        BorderThickness="1"
    BorderBrush="{DynamicResource Brush.Border}"
           Opacity="0.3"
         Margin="2"/>
         
     <!-- Checkmark icon (Segoe MDL2 Assets) -->
  <TextBlock x:Name="CheckIcon"
        Text="&#xE73E;"
        FontFamily="Segoe MDL2 Assets"
           FontSize="28"
             HorizontalAlignment="Center"
                VerticalAlignment="Center"
       Foreground="White"
                Opacity="0"/>
          </Grid>
     </Border>
                </Grid>
   <ControlTemplate.Triggers>
    <Trigger Property="IsChecked" Value="True">
     <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Brush.Primary}"/>
           <Setter TargetName="CheckIcon" Property="Opacity" Value="1"/>
          <Setter TargetName="InnerBorder" Property="Opacity" Value="0"/>
 </Trigger>
        <Trigger Property="IsMouseOver" Value="True">
       <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Brush.Border}"/>
  <Setter TargetName="InnerBorder" Property="Opacity" Value="0.6"/>
    </Trigger>
     <MultiTrigger>
             <MultiTrigger.Conditions>
               <Condition Property="IsMouseOver" Value="True"/>
               <Condition Property="IsChecked" Value="True"/>
        </MultiTrigger.Conditions>
    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Brush.PrimaryDark}"/>
       <Setter TargetName="InnerBorder" Property="Opacity" Value="0"/>
                 </MultiTrigger>
   </ControlTemplate.Triggers>
             </ControlTemplate>
    </Setter.Value>
   </Setter>
        </Style>

        <!-- Theme-aware ToolTip Style -->
        <Style TargetType="ToolTip">
            <Setter Property="Background" Value="{DynamicResource Brush.Surface}"/>
            <Setter Property="Foreground" Value="{DynamicResource Brush.TextPrimary}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="8,4"/>
            <Setter Property="FontFamily" Value="{StaticResource Font.Main}"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="HasDropShadow" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolTip">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="6"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="8" 
                                                  ShadowDepth="2" 
                                                  Opacity="0.3"
                                                  Direction="270"/>
                            </Border.Effect>
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Thumb for the scrollbar -->
        <Style x:Key="ScrollBarThumb" TargetType="Thumb">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                        <Border x:Name="ThumbBd" CornerRadius="5" Background="{DynamicResource Brush.Primary}" Opacity="0.7"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="ThumbBd" Property="Opacity" Value="0.95"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="ThumbBd" Property="Opacity" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Default style for all ScrollBars -->
        <Style TargetType="ScrollBar">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollBar">
                        <Grid x:Name="Root" Background="Transparent">
                            <!-- Track background behind the thumb -->
                            <Border x:Name="TrackBackground" Background="#15000000" CornerRadius="5"/>
                            <Track x:Name="PART_Track" IsDirectionReversed="true" Focusable="false">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumb}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!-- Vertical scrollbar sizing -->
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter TargetName="Root" Property="Width" Value="10"/>
                                <Setter TargetName="TrackBackground" Property="Width" Value="10"/>
                                <Setter TargetName="TrackBackground" Property="Margin" Value="0,4,0,4"/>
                            </Trigger>
                            <!-- Horizontal scrollbar sizing -->
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="Root" Property="Height" Value="10"/>
                                <Setter TargetName="TrackBackground" Property="Height" Value="10"/>
                                <Setter TargetName="TrackBackground" Property="Margin" Value="4,0,4,0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
